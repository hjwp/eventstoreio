# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import persistent_pb2 as persistent__pb2


class PersistentSubscriptionsStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/event_store.client.persistent_subscriptions.PersistentSubscriptions/Create',
                request_serializer=persistent__pb2.CreateReq.SerializeToString,
                response_deserializer=persistent__pb2.CreateResp.FromString,
                )
        self.Update = channel.unary_unary(
                '/event_store.client.persistent_subscriptions.PersistentSubscriptions/Update',
                request_serializer=persistent__pb2.UpdateReq.SerializeToString,
                response_deserializer=persistent__pb2.UpdateResp.FromString,
                )
        self.Delete = channel.unary_unary(
                '/event_store.client.persistent_subscriptions.PersistentSubscriptions/Delete',
                request_serializer=persistent__pb2.DeleteReq.SerializeToString,
                response_deserializer=persistent__pb2.DeleteResp.FromString,
                )
        self.Read = channel.stream_stream(
                '/event_store.client.persistent_subscriptions.PersistentSubscriptions/Read',
                request_serializer=persistent__pb2.ReadReq.SerializeToString,
                response_deserializer=persistent__pb2.ReadResp.FromString,
                )


class PersistentSubscriptionsServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PersistentSubscriptionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=persistent__pb2.CreateReq.FromString,
                    response_serializer=persistent__pb2.CreateResp.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=persistent__pb2.UpdateReq.FromString,
                    response_serializer=persistent__pb2.UpdateResp.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=persistent__pb2.DeleteReq.FromString,
                    response_serializer=persistent__pb2.DeleteResp.SerializeToString,
            ),
            'Read': grpc.stream_stream_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=persistent__pb2.ReadReq.FromString,
                    response_serializer=persistent__pb2.ReadResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'event_store.client.persistent_subscriptions.PersistentSubscriptions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PersistentSubscriptions(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_store.client.persistent_subscriptions.PersistentSubscriptions/Create',
            persistent__pb2.CreateReq.SerializeToString,
            persistent__pb2.CreateResp.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_store.client.persistent_subscriptions.PersistentSubscriptions/Update',
            persistent__pb2.UpdateReq.SerializeToString,
            persistent__pb2.UpdateResp.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_store.client.persistent_subscriptions.PersistentSubscriptions/Delete',
            persistent__pb2.DeleteReq.SerializeToString,
            persistent__pb2.DeleteResp.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/event_store.client.persistent_subscriptions.PersistentSubscriptions/Read',
            persistent__pb2.ReadReq.SerializeToString,
            persistent__pb2.ReadResp.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
